import { useEffect, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faStar as faRegularStar } from "@fortawesome/free-regular-svg-icons";
import {
  getSuppliers,
  addSuppliers,
  deleteSupplier,
  updateSupplier,
} from "../../services/SupplierApi";
import Pagination from "../../components/admin/buttons/Pagination";
import SupplierForm from "../../components/admin/forms/SupplierForm";
import SupplierTable from "../../components/admin/tables/SupplierTable";
const SupplierPage = () => {
  const [suppliers, setSuppliers] = useState([]); // State qu·∫£n l√Ω danh s√°ch
  const [searchTerm, setSearchTerm] = useState(""); // State l∆∞u t·ª´ kh√≥a t√¨m ki·∫øm
  const [filteredSuppliers, setFilteredSuppliers] = useState([]); // State l∆∞u danh s√°ch sau khi l·ªçc t√¨m ki·∫øm
  const [currentPage, setCurrentPage] = useState(1); // State l∆∞u trang hi·ªán t·∫°i trong ph√¢n trang
  const itemsPerPage = 5; // S·ªë l∆∞·ª£ng hi·ªÉn th·ªã tr√™n m·ªói trang
  const [selectedSupplier, setSelectedSupplier] = useState(null); // State l∆∞u th√¥ng tin  ƒëang ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ ch·ªânh s·ª≠a
  // State l∆∞u d·ªØ li·ªáu c·ªßa form nh·∫≠p th√¥ng tin
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    address: "",
    email: "",
  });
  // useEffect ƒë·ªÉ g·ªçi API l·∫•y danh s√°ch khi component ƒë∆∞·ª£c render l·∫ßn ƒë·∫ßu
  useEffect(() => {
    fetchSuppliers();
  }, []);
  // H√†m l·∫•y danh s√°ch t·ª´ API
  const fetchSuppliers = async () => {
    const data = await getSuppliers();
    setSuppliers(data); // L∆∞u danh s√°ch v√†o state
    setFilteredSuppliers(data); // Hi·ªÉn th·ªã danh s√°ch ban ƒë·∫ßu
  };
  // H√†m x·ª≠ l√Ω khi c√≥ s·ª± thay ƒë·ªïi trong √¥ input c·ªßa form
  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };
  // H√†m x·ª≠ l√Ω khi click v√†o m·ªôt trong b·∫£ng ƒë·ªÉ ch·ªânh s·ª≠a
  const handleEdit = (supplier) => {
    setSelectedSupplier(supplier); // L∆∞u ƒë∆∞·ª£c ch·ªçn
    setFormData(supplier); // ƒêi·ªÅn th√¥ng tin v√†o form
  };
  // H√†m x√≥a
  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th√†nh vi√™n n√†y?")) {
      await deleteSupplier(id);
      fetchSuppliers(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi x√≥a
      resetForm(); // Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    }
  };
  // H√†m th√™m m·ªõi
  const handleAdd = async (e) => {
    e.preventDefault();
    // Ki·ªÉm tra n·∫øu m·ªôt s·ªë tr∆∞·ªùng b·∫Øt bu·ªôc b·ªã b·ªè tr·ªëng
    if (!formData.name || !formData.email || !formData.address) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√°c tr∆∞·ªùng b·∫Øt bu·ªôc!");
      return;
    }
    await addSuppliers(formData);
    fetchSuppliers(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi th√™m
    resetForm(); // Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
  };
  // H√†m c·∫≠p nh·∫≠t th√¥ng tin
  const handleUpdate = async (e) => {
    e.preventDefault();
    if (selectedSupplier) {
      await updateSupplier(selectedSupplier.id, formData);
      fetchSuppliers(); // C·∫≠p nh·∫≠t l·∫°i danh s√°ch sau khi s·ª≠a
      resetForm(); // Reset form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
    }
  };
  // H√†m ƒë·∫∑t l·∫°i form v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
  const resetForm = () => {
    setFormData({
      name: "",
      phone: "",
      address: "",
      email: "",
    });
    setSelectedSupplier(null); // B·ªè ch·ªçn
    setSearchTerm(""); // Reset t√¨m ki·∫øm
  };
  // H√†m x·ª≠ l√Ω t√¨m ki·∫øm
  const handleSearch = (e) => {
    const value = e.target.value.toLowerCase();
    setSearchTerm(value);
    // L·ªçc danh s√°ch theo t·ª´ kh√≥a t√¨m ki·∫øm
    const filtered = suppliers.filter((supplier) =>
      Object.values(supplier).some((field) =>
        String(field).toLowerCase().includes(value)
      )
    );
    setFilteredSuppliers(filtered);
    setCurrentPage(1); // Reset v·ªÅ trang ƒë·∫ßu ti√™n khi t√¨m ki·∫øm
  };

  // Ph√¢n trang: L·∫•y danh s√°ch theo trang hi·ªán t·∫°i
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentSuppliers = filteredSuppliers.slice(
    indexOfFirstItem,
    indexOfLastItem
  );
  const totalPages = Math.ceil(filteredSuppliers.length / itemsPerPage);
  // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng chuy·ªÉn trang
  const handlePageChange = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
    }
  };

  return (
    <div className="w-full bg-white p-6 rounded-lg shadow-md">
      <div className="flex">
        <FontAwesomeIcon
          icon={faRegularStar}
          className="mt-1 mr-2 text-[#012970] text-lg"
        />
        <h2 className="mb-5 ">Th√¥ng tin nh√† cung c·∫•p</h2>
      </div>

      <hr className="mb-5 border-t-2 border-gray-300" />
      <SupplierForm
        formData={formData}
        handleChange={handleChange}
        selectedSupplier={selectedSupplier}
        handleAdd={handleAdd}
        handleDelete={handleDelete}
        handleUpdate={handleUpdate}
        resetForm={resetForm}
      />
      <div className="border border-[#074EE8] p-4 rounded-lg">
        <div className="flex gap-4 mb-4">
          <input
            type="text"
            value={searchTerm}
            onChange={handleSearch} // T·ª± ƒë·ªông l·ªçc danh s√°ch khi nh·∫≠p
            placeholder="üîç T√¨m ki·∫øm theo t√™n nh√† cung c·∫•p,..."
            className="border p-2 border-gray-400 rounded-lg flex-1 focus:outline-none focus:ring-2 focus:ring-blue-200 focus:border-blue-200"
          />
        </div>

        <hr className="w-full my-4 border-gray-300" />
        <h3 className="text-md font-semibold mb-4">Danh s√°ch nh√† cung c·∫•p:</h3>
        <div className="overflow-x-auto">
          <SupplierTable
            currentSuppliers={currentSuppliers}
            handleEdit={handleEdit}
            indexOfFirstItem={indexOfFirstItem}
            selectedSupplier={selectedSupplier}
            handleDelete={handleDelete}
          />
        </div>
        {/* Component ph√¢n trang */}
        <Pagination
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={handlePageChange}
        />
      </div>
    </div>
  );
};
export default SupplierPage;
